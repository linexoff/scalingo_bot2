import json
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

BOT_TOKEN = "7442669013:AAH3EateroGENdEFznRfl9zviNK5d7LGGaA"
ADMIN_ID = 7864781525  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

DATA_FILE = "subscriptions.json"

def load_subscriptions():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_subscriptions(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

subscriptions = load_subscriptions()

# --- –ö–æ–º–∞–Ω–¥—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üìã –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üõ° –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞")]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Galaxy –ë–æ—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---

async def handle_text_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –¢–∞—Ä–∏—Ñ—ã":
        keyboard = [
            [InlineKeyboardButton("‚≠êÔ∏è Galaxy club ‚Äî 499‚ÇΩ", callback_data="galaxy")],
            [InlineKeyboardButton("üíñ –î–æ–Ω–∞—Ç", callback_data="donate")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif text == "üõ° –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞":
        user_id = update.message.from_user.id
        sub = subscriptions.get(str(user_id))
        if sub == "galaxy":
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: Galaxy ‚≠êÔ∏è ùíÑùíçùíñùíÉ\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª](https://t.me/+Rz2eXtJY94pkYTMy)",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ?",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="tariffs")]]
                )
            )

# --- –ö–Ω–æ–ø–∫–∏ ---

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        if query.data == "tariffs":
            keyboard = [
                [InlineKeyboardButton("‚≠êÔ∏è Galaxy club ‚Äî 499‚ÇΩ", callback_data="galaxy")],
                [InlineKeyboardButton("üíñ –î–æ–Ω–∞—Ç", callback_data="donate")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            if query.message.text:
                await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "back_to_main":
            if query.message.text:
                await query.edit_message_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–Ω–∏–∑—É.")
            else:
                await query.message.reply_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–Ω–∏–∑—É.")

        elif query.data == "galaxy":
            text = (
                "üåü *Galaxy ‚≠êÔ∏è ùíÑùíçùíñùíÉ (ùëΩùë∞ùë∑)* ‚Äî 499‚ÇΩ\n\n"
                "*–û–ø–∏—Å–∞–Ω–∏–µ Galaxy ‚≠êÔ∏è ùíÑùíçùíñùíÉ (ùëΩùë∞ùë∑):*\n"
                "–í—ã–¥–∞–µ—Ç—Å—è –∑–∞ –¥–æ–Ω–∞—Ç –≤ 499‚ÇΩ.\n\n"
                "–í –Ω–µ–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º! *–ù–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –∞—Ä—Ç–æ–≤ –¥–ª—è –í–∏–ø –∫–∞–Ω–∞–ª–∞ —è —Ä–∞–±–æ—Ç–∞—é –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª—å—à–µ. –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!*\n"
                "‚Ä¢ –í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ—Å–Ω–æ–≤—ã –∏ –≤–∏–ø–∫–∏, –∞ —Ç–∞–∫ –∂–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\n"
                "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º - @galql"
            )
            keyboard = [
                [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_galaxy")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tariffs")]
            ]
            if query.message.text:
                await query.edit_message_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.reply_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "donate":
            text = (
                "üíñ *–î–æ–Ω–∞—Ç*\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É,\n"
                "–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –º–æ—é –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚ù§Ô∏è\n\n"
                "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n"
                "–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n–¢-–ë–∞–Ω–∫: 5536 9141 5550 3182\n–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫: 2200 1523 7703 6275\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: Donat\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª"
            )
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_donate")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tariffs")]
            ]
            if query.message.text:
                await query.edit_message_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.reply_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "pay_galaxy":
            text = (
                "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
                "–¢-–ë–∞–Ω–∫: 5536 9141 5550 3182\n"
                "–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫: 2200 1523 7703 6275\n"
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: GalaxyVIP\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è."
            )
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_galaxy"),
                    InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="tariffs")
                ]
            ]
            if query.message.text:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data == "paid_galaxy":
            context.user_data["awaiting_screenshot"] = "galaxy"
            if query.message.text:
                await query.edit_message_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                await query.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

        elif query.data == "paid_donate":
            if query.message.text:
                await query.edit_message_text("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–∞—à –¥–æ–Ω–∞—Ç –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–Ω—è ‚ù§Ô∏è")
            else:
                await query.message.reply_text("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–∞—à –¥–æ–Ω–∞—Ç –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–Ω—è ‚ù§Ô∏è")

        elif query.data.startswith("confirm_galaxy_"):
            target_user_id = query.data.split("_")[-1]
            subscriptions[str(target_user_id)] = "galaxy"
            save_subscriptions(subscriptions)
            if query.message.text:
                await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ Galaxy —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!")
            else:
                await query.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ Galaxy —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=int(target_user_id),
                    text="üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Galaxy –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n[–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª](https://t.me/+Rz2eXtJY94pkYTMy)",
                    parse_mode="Markdown"
                )
            except:
                pass

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ Galaxy —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{query.from_user.username} (ID: {target_user_id})"
            )

        elif query.data.startswith("cancel_"):
            if query.message.text:
                await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            else:
                await query.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É."
                )
            except:
                pass

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{query.from_user.username} (ID: {user_id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω."
            )

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# --- –§–æ—Ç–æ: —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã ---

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username = user.username or user.first_name
    tariff = context.user_data.get("awaiting_screenshot")

    if tariff == "galaxy":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å Galaxy", callback_data=f"confirm_galaxy_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_id}")
            ]
        ]
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì• –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{username} (ID: {user_id})"
        )
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=update.message.photo[-1].file_id,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "‚ùó **–í–ê–ñ–ù–û: –ù–ï –ü–û–í–¢–û–†–Ø–ô–¢–ï –û–¢–ü–†–ê–í–ö–£ –ß–ï–ö–ê –ü–û –û–î–ù–û–ô –ò –¢–û–ô –ñ–ï –û–ü–õ–ê–¢–ï!**\n\n"
            "–ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ ‚Äî **–ù–ï –ù–£–ñ–ù–û –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç!** "
            "–ü—Ä–æ—Å—Ç–æ **–Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî @galql.**\n\n"
            "‚úÖ –ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –≤–º–µ—Å—Ç–æ —á–µ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏ —Ç–æ–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.\n\n"
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n"
            "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –¥–æ–Ω–∞—Ç—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è ‚Äî **–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–ê.**\n"
            "–ó–∞ —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –±—É–¥–µ—Ç–µ **–Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã** –≤ –±–æ—Ç–µ –∏ –∫–∞–Ω–∞–ª–µ. **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.**\n\n"
            "**–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É: @galql.**",
            parse_mode='Markdown')

        context.user_data["awaiting_screenshot"] = None
    else:
        await update.message.reply_text("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.")

# --- –ó–∞–ø—É—Å–∫ ---

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_menu))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()

if __name__ == "__main__":
    main()
